Sugar 1.0

Abstract

Sugar is an extremely simple application-level full-duplex communication protocol based on TCP.
Its purpose is to simplify and standardize the communication between servers and clients in games where
there are 2 or more players in the same match that need to exchange information both with the server and with the
other clients.


Terminology

    -peer   : any actor that participates in the communication
    -server : a special peer that acts as an authoritative peer
    -room   : a group of peers
    -hall   : a group of peers that did not yet join any room

Every peer is identified by a UPI that is provided from the server and remains the same for the duration of the session. In case of disconnection/reconnection, the peer has the 
opportunity to identify itself sending the server its old UPI, and if the server accepts the peer will riconnect to the old session, otherwise he will be granted a new UPI and
will start a new session.

Session Initiation

A session always starts with a TCP connection from the peer to the server.
When the server accepts the connection the peer joins the hall and is granted with a UPI.
The TCP connection is kept alive until the peer disconnects (the server never drops the connection from its side otherwise).


Communication 

Any message has a MESSAGE TYPE and a MESSAGE ID. Message ids are used for example to send a response to a previous message:
	e.g.:
	Peer sends an ACTION message with id "XXX" to the server proposing an action he wants to perform, then server accepts it and sends and ACTION message
	with the same id "XXX" with an OK message inside.

JOIN messages:
	They are used by the server to invite peers to join certain rooms, or by peers to ask the server to join a room.
CONTROL messages:
	They are used mainly by the server to send status messages, can also be used by peers, mainly to answer to a sever's CONTROL message.
ACTION messages:
	They are used mainly by the peers to propose actions.
NOTIFY messages:
	They are used mainly by the server to notify the peers about the status of the session or about new events that happened.
HEARTBEAT messages:
	They are used ONLY by the server, and sent periodically to the clients to check the status of the connection and identify disconnections.	


Message

Messages are JSON strings like this:

{
	"messageType": <one of: "JOIN", "CONTROL", "ACTION", "NOTIFY", "HEARTBEAT">,
	"messageID": <UUID>,
	<other fields depending on the message type and not specified by the protocol>
}

<-> Messages sent in this protocol have to be trimmed and all whitespace characters have to be removed in order to avoid bandwith waste. <->


Use case:

PEER												                    SERVER

1. TCP connection ----------------------------------------------------> 
			      <----------------------------------------------------	2. send UPI
3. Action (ID X)  ----------------------------------------------------> 
			      <---------------------------------------------------- 4. Action (ID X) "OK"
5. Action (ID Y)  ----------------------------------------------------> 
			      <---------------------------------------------------- 6. Action (ID Y) "KO"
			      <---------------------------------------------------- 7. Notify "a peer disconnected from the room you are into"










